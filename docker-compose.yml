version: "3.9"

volumes:
  clickhouse_data: {}
  postgres_data: {}

networks:
  netwatcher:
    driver: bridge

services:
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    networks: [netwatcher]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:80/ >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 12
      start_period: 10s

  postgres:
    image: postgres:${POSTGRES_IMAGE_TAG:-17-alpine}
    restart: on-failure
    networks: [netwatcher]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -p 5432 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s

  clickhouse:
    image: clickhouse/clickhouse-server:${CLICKHOUSE_IMAGE_TAG}
    restart: unless-stopped
    networks: [netwatcher]
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8123}:8123"
      - "${CLICKHOUSE_NATIVE_PORT:-9000}:9000"
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --host 127.0.0.1 --port 9000 --user ${CLICKHOUSE_USER} --password ${CLICKHOUSE_PASSWORD} --query 'SELECT 1' >/dev/null 2>&1"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 15s
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "5"

  # === App services ===

  controller:
    image: netwatcher-controller
    restart: unless-stopped
    networks: [netwatcher]
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    # (healthcheck intentionally removed)

  panel:
    image: netwatcher-panel
    restart: unless-stopped
    networks: [netwatcher]
    environment:
      NW_GLOBAL_ENDPOINT: ${NW_GLOBAL_ENDPOINT}
    ports:
      - "3000:3000"
    depends_on:
      # caddy has a healthcheck; keep waiting on that
      caddy:
        condition: service_healthy
        # controller has no healthcheck nowâ€”just start order is enough
        # Use simple list to avoid waiting on health:
        # (Compose will start panel after controller is started)
        # If you prefer condition syntax, you can use `service_started`
        # where supported by your Compose version.
        # controller:
        #   condition: service_started
        # Simpler/most compatible:
        # - controller